name: Update KiCad Plugins

on:
  schedule:
    - cron: '0 0 15 * *'  # Monthly on the 15th at midnight
  workflow_dispatch:  # Allow manual trigger

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update plugins to latest versions
        run: |
          # Generate packages.json from plugin URLs
          echo '{"$schema": "https://go.kicad.org/pcm/schemas/v1", "packages": []}' > packages.json
          
          # Process each plugin URL
          while read -r url; do
            # Skip empty lines and comments
            [[ -z "$url" || "$url" =~ ^# ]] && continue
            
            # Extract owner/repo from GitHub URL
            REPO=$(echo "$url" | sed -E 's|https://github.com/||; s|/$||')
            OWNER=$(echo "$REPO" | cut -d'/' -f1)
            NAME=$(echo "$REPO" | cut -d'/' -f2)
            
            echo "Checking $REPO..."
            
            # Get latest release info
            RELEASE_INFO=$(curl -s "https://api.github.com/repos/$REPO/releases/latest")
            VERSION=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
            REPO_INFO=$(curl -s "https://api.github.com/repos/$REPO")
            AUTHOR=$(echo "$REPO_INFO" | jq -r '.owner.login')
            DESCRIPTION=$(echo "$REPO_INFO" | jq -r '.description // "No description"')
            LICENSE=$(echo "$REPO_INFO" | jq -r '.license.spdx_id // "MIT"')
            
            # Parse version and detect KiCad version from tag
            RAW_VERSION="$VERSION"
            # Handle versions like v8.0-0.5.0 or v7.0.1 or v1.2.3
            if [[ "$VERSION" =~ ^v?([0-9]+\.[0-9]+)-([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              # Format: v8.0-0.5.0 -> KiCad 8.0, version 0.5.0
              KICAD_VERSION="${BASH_REMATCH[1]}"
              CLEAN_VERSION="${BASH_REMATCH[2]}"
            elif [[ "$VERSION" =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              # Standard semantic version
              CLEAN_VERSION="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
              # Try to detect KiCad version from release name or default to 7.0
              if echo "$RELEASE_INFO" | jq -r '.name' | grep -qi 'kicad.*8'; then
                KICAD_VERSION="8.0"
              elif echo "$RELEASE_INFO" | jq -r '.name' | grep -qi 'kicad.*9'; then
                KICAD_VERSION="9.0"
              else
                KICAD_VERSION="7.0"
              fi
            else
              # Fallback: strip v prefix if present
              CLEAN_VERSION="${VERSION#v}"
              KICAD_VERSION="7.0"
            fi
            
            # Map GitHub licenses to KiCad-compatible ones
            case "$LICENSE" in
              "NOASSERTION"|"") LICENSE="MIT" ;;
              "GPL-2.0"|"GPL-2.0-only"|"GPL-2.0-or-later") LICENSE="GPL" ;;
              "GPL-3.0"|"GPL-3.0-only"|"GPL-3.0-or-later") LICENSE="GPL" ;;
              "LGPL-2.1"|"LGPL-2.1-only"|"LGPL-2.1-or-later") LICENSE="LGPL" ;;
              "LGPL-3.0"|"LGPL-3.0-only"|"LGPL-3.0-or-later") LICENSE="LGPL" ;;
              "Apache-2.0"|"MIT"|"BSD-2-Clause"|"BSD-3-Clause"|"ISC") ;; # These are valid
              "CC0-1.0") LICENSE="CC0-1.0" ;; # Creative Commons
              "Unlicense") LICENSE="Unlicense" ;;
              *) LICENSE="MIT" ;; # Default fallback
            esac
            
            # Find PCM zip file (exclude -lib variants)
            ZIP_NAME=$(echo "$RELEASE_INFO" | jq -r '.assets[].name | select(test("pcm|kicad|plugin"; "i") and test("\\.zip$") and (test("-lib"; "i") | not))' | head -1)
            
            # If no PCM-specific zip, take the first zip
            if [ -z "$ZIP_NAME" ]; then
              ZIP_NAME=$(echo "$RELEASE_INFO" | jq -r '.assets[].name | select(test("\\.zip$"))' | head -1)
            fi
            
            if [ -z "$ZIP_NAME" ]; then
              echo "No zip file found for $REPO"
              continue
            fi
            
            DOWNLOAD_URL="https://github.com/$REPO/releases/download/$VERSION/$ZIP_NAME"
            
            # Download and calculate hash
            if wget -q "$DOWNLOAD_URL" -O temp.zip; then
              SHA256=$(sha256sum temp.zip | cut -d' ' -f1)
              SIZE=$(stat -c%s temp.zip)
              rm temp.zip
              
              # Create plugin entry
              PLUGIN_ENTRY=$(jq -n \
                --arg id "com.github.${OWNER,,}.${NAME,,}" \
                --arg name "$NAME" \
                --arg desc "$DESCRIPTION" \
                --arg author "$AUTHOR" \
                --arg homepage "$url" \
                --arg version "$CLEAN_VERSION" \
                --arg dl_url "$DOWNLOAD_URL" \
                --arg sha256 "$SHA256" \
                --arg license "$LICENSE" \
                --arg kicad_ver "$KICAD_VERSION" \
                --argjson size "$SIZE" \
                '{
                  "identifier": $id,
                  "name": $name,
                  "description": $desc,
                  "description_full": $desc,
                  "author": {"name": $author, "contact": {"github": $homepage}},
                  "maintainer": {"name": $author, "contact": {"github": $homepage}},
                  "license": $license,
                  "type": "plugin",
                  "resources": {"homepage": $homepage},
                  "versions": [{
                    "version": $version,
                    "status": "stable",
                    "kicad_version": $kicad_ver,
                    "download_url": $dl_url,
                    "download_sha256": $sha256,
                    "download_size": $size,
                    "install_size": ($size * 1.1 | floor)
                  }]
                }')
              
              # Add to packages.json
              jq --argjson plugin "$PLUGIN_ENTRY" '.packages += [$plugin]' packages.json > packages.json.tmp && mv packages.json.tmp packages.json
              
              echo "Added $NAME version $CLEAN_VERSION (KiCad $KICAD_VERSION)"
            else
              echo "Failed to download $ZIP_NAME for $REPO"
            fi
          done < <(jq -r '.plugins[]' plugins.json)
          
          # Update repository.json
          PACKAGES_SHA=$(sha256sum packages.json | cut -d' ' -f1)
          TIMESTAMP=$(date +%s)
          UTC_TIME=$(date -u +"%Y-%m-%d %H:%M:%S")
          
          jq --arg packages_sha "$PACKAGES_SHA" \
             --arg utc_time "$UTC_TIME" \
             --argjson timestamp "$TIMESTAMP" \
             '.packages.sha256 = $packages_sha |
              .packages.update_time_utc = $utc_time |
              .packages.update_timestamp = $timestamp' repository.json > repository.json.tmp && mv repository.json.tmp repository.json
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Commit and push if changed
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update KiKit to $VERSION"
            git push
          fi